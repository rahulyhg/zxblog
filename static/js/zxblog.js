// Generated by CoffeeScript 1.4.0
var page_generator, sys_cfg;

sys_cfg = {
  about_url: '/static/about.html',
  portfolio_url: '/static/portfolio.html',
  blogs_url: '/static/blogs.html',
  post_url: '/static/post.html',
  portfolio_data_url: '/wp_api/v1/posts?category_name=portfolio&per_page=15',
  posts_data_url: '/wp_api/v1/posts?per_page=2',
  post_data_url: '/wp_api/v1/posts/:postid',
  cats_list_url: '/wp_api/v1/taxonomies/category/terms?parent=5'
};

angular.module('zxblog', ['ngRoute', 'ngResource', 'ngSanitize']).config(function($routeProvider) {
  return $routeProvider.when('/about', {
    controller: 'AboutCtrl',
    templateUrl: sys_cfg.about_url
  }).when('/portfolio/:page', {
    controller: 'PortfolioCtrl',
    templateUrl: sys_cfg.portfolio_url
  }).when('/posts/:catname/:page', {
    controller: 'BlogsCtrl',
    templateUrl: sys_cfg.blogs_url
  }).when('/post/:postid', {
    controller: 'PostCtrl',
    templateUrl: sys_cfg.post_url
  }).otherwise({
    redirectTo: '/about'
  });
}).controller('BlogsCtrl', function($rootScope, $scope, $routeParams, postsFactory) {
  var cat_name, fat_param, posts_info;
  $rootScope.$pg_type = 'posts';
  $rootScope.$header_logo_cls = 'header-bar-logo-normal';
  cat_name = $routeParams.catname === 'all' ? 'blog' : $routeParams.catname;
  fat_param = {
    category_name: cat_name,
    paged: $routeParams.page
  };
  return posts_info = postsFactory.get(fat_param, function() {
    $scope.$posts = posts_info.posts;
    $scope.$current_page = $routeParams.page;
    $scope.$catname = $routeParams.catname;
    return $scope.$pgs = page_generator(posts_info.found, 2, $routeParams.page);
  });
}).factory('postsFactory', [
  '$resource', function($resource) {
    return $resource(sys_cfg.posts_data_url, null, {});
  }
]).controller('PostCtrl', function($rootScope, $scope, $routeParams, postFactory) {
  var post_info;
  $rootScope.$pg_type = 'post';
  $rootScope.$header_logo_cls = 'header-bar-logo-normal';
  return post_info = postFactory.get({
    postid: $routeParams.postid
  }, function() {
    $scope.$post = post_info;
    return console.log(post_info);
  });
}).factory('postFactory', [
  '$resource', function($resource) {
    return $resource(sys_cfg.post_data_url, {
      id: '@postid'
    }, {});
  }
]).controller('CatsCtrl', function($rootScope, $scope, $routeParams, catsFactory) {
  var cats_info;
  return cats_info = catsFactory.get({}, function() {
    var cat, cats, pghd, _i, _len, _ref, _ref1;
    cats = [
      {
        name: 'all'
      }
    ];
    pghd = function(cat) {
      return cats.push(cat);
    };
    _ref = cats_info.terms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cat = _ref[_i];
      if (!((_ref1 = cat.name) === '未分类' || _ref1 === 'portfolio' || _ref1 === 'blog')) {
        pghd(cat);
      }
    }
    $scope.$cats = cats;
    return $scope.$cat_name = $routeParams.catname;
  });
}).factory('catsFactory', [
  '$resource', function($resource) {
    return $resource(sys_cfg.cats_list_url, null, {});
  }
]).controller('PortfolioCtrl', function($rootScope, $scope, $routeParams, portFactory) {
  var ports_info;
  $rootScope.$pg_type = 'portfolio';
  $rootScope.$header_logo_cls = 'header-bar-logo-normal';
  return ports_info = portFactory.get({
    paged: $routeParams.page
  }, function() {
    console.log(ports_info);
    $scope.$ports = ports_info.posts;
    $scope.$port_count = ports_info.found;
    $scope.$current_page = $routeParams.page;
    return $scope.$pgs = page_generator(ports_info.found * 22, 15, $routeParams.page);
  });
}).factory('portFactory', [
  '$resource', function($resource) {
    return $resource(sys_cfg.portfolio_data_url, null, {});
  }
]).controller('AboutCtrl', function($rootScope, $scope) {
  var b;
  $rootScope.$pg_type = 'about';
  $rootScope.$header_logo_cls = 'header-bar-logo-about';
  return b = 2;
}).controller('MainCntl', function($rootScope, $scope) {
  var b;
  return b = 1;
});

page_generator = function(total, per, current) {
  var hd, lks, pg, pghd, pgs, tl, _i;
  pgs = Math.floor((total + per - 1) / per);
  if (pgs < 11) {
    hd = 1;
    tl = pgs;
  } else if (current < 6) {
    hd = 1;
    tl = 10;
  } else if ((current + 5) > pgs) {
    tl = pgs;
    hd = pgs - 9;
  } else {
    hd = current - 4;
    tl = current + 5;
  }
  lks = [];
  if (hd > 1) {
    lks.push({
      pg: 1,
      txt: '<<'
    });
  }
  pghd = function(pg) {
    return lks.push({
      pg: pg,
      txt: pg
    });
  };
  for (pg = _i = hd; hd <= tl ? _i <= tl : _i >= tl; pg = hd <= tl ? ++_i : --_i) {
    pghd(pg);
  }
  if (pgs > tl) {
    lks.push({
      pg: pgs,
      txt: '>>'
    });
  }
  return lks;
};
